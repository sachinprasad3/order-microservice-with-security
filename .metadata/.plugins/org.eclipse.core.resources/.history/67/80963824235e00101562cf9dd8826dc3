package com.product.service.security;

import java.io.IOException;

import java.util.Collections;
import java.util.List;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Service;
import org.springframework.web.filter.OncePerRequestFilter;

import com.order.service.security.JwtUtil;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Service
public class JwtAuthFilter extends OncePerRequestFilter{

//	@Override
//	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//			throws ServletException, IOException {
//
//
//		final String authHeader = request.getHeader("Authorization");
//
//        // Check for Bearer token
//        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
//            filterChain.doFilter(request, response);
//            return;
//        }
//
//        // Extract token
//        String token = authHeader.substring(7);
//
//        // Validate token
//        if (JwtUtil.isTokenValid(token)) {
//            String username = JwtUtil.extractUsername(token);
//
//            // Check if already authenticated
//            if (SecurityContextHolder.getContext().getAuthentication() == null) {
//                // Set authentication manually
//                UsernamePasswordAuthenticationToken authToken =
//                        new UsernamePasswordAuthenticationToken(username, null, Collections.emptyList());
//
//                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
//
//                SecurityContextHolder.getContext().setAuthentication(authToken);
//            }
//        } else {
//            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
//            return;
//        }
//
//        filterChain.doFilter(request, response);
//		
//	}
	
	@Override
	protected void doFilterInternal(HttpServletRequest request,
	                                HttpServletResponse response,
	                                FilterChain filterChain)
	    throws ServletException, IOException {

	    String authHeader = request.getHeader("Authorization");
	    System.out.println(">>> Token Received in product-service: " + authHeader);

	    if (authHeader == null || !authHeader.startsWith("Bearer ")) {
	        System.out.println(">>> No valid Authorization header found");
	        filterChain.doFilter(request, response);
	        return;
	    }

	    String token = authHeader.substring(7);

        if (JwtUtil.isTokenValid(token)) {
            String username = JwtUtil.extractUsername(token);
            List<String> roles = JwtUtil.extractRoles(token); // Get roles from token

            // Convert roles to authorities
            List<SimpleGrantedAuthority> authorities = roles.stream()
                .map(SimpleGrantedAuthority::new)
                .toList(); // Or use .collect(Collectors.toList()) in Java < 16

            if (SecurityContextHolder.getContext().getAuthentication() == null) {
                // Set token as principal to forward via Feign
                UsernamePasswordAuthenticationToken authToken =
                    new UsernamePasswordAuthenticationToken("Bearer " + token, null, authorities);

                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        } else {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

	    filterChain.doFilter(request, response);
	}


}
